#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.6,1))
obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
r0=matrix(data=runif(Nsamp*length(obj1$parlist),0,1),nrow=Nsamp,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-5,1e-6,1e-7)
for (scale_pert in perts[2]){
print(  scale_pert)
#r0=x, r1=x+h
for (j in 1:Kpar){
r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
#final input matrix (sample coordinates) to be run on a model
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
#bind cooridnates and output array
xy=cbind(X,y)
#caculate the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
#create output folder
name_dir_path = str_c(t_catchment,'/',sub_catchment,'/',t_year,'/','seed-',no_seed,'/',scale_pert,'/')
dir.create(name_dir_path,recursive = TRUE)
#print parameter range
sink(str_c(t_catchment,'/',sub_catchment,'/',t_year,'/parameter_range.txt'))
print(obj1)
sink()
#write derivates which is (Nsamp X Kpar) matrix
write.csv(deriv,str_c(name_dir_path,scale_pert,'.csv'),row.names = F)
#coordinates and RMSE
write.csv(xy,str_c(name_dir_path,'xy.csv'),row.names = F)
print(str_c(wd,name_dir_path))
}
}
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
#compute Jacobian using finite differencing
est_Jac = function (t_year='70s', no_seed=2025, t_catchment = 'Gingera',sub_catchment='Constrained range',
Nsamp=1000){
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
head(tsPQE)
#sub-decades
ts70s <- tsPQE["1970-01-01::1979-12-31"]
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_t_year=get(str_c('ts',t_year))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.2,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.6,1))
obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
r0=matrix(data=runif(Nsamp*length(obj1$parlist),0,1),nrow=Nsamp,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-5,1e-6,1e-7)
for (scale_pert in perts[2]){
print(  scale_pert)
#r0=x, r1=x+h
for (j in 1:Kpar){
r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
#final input matrix (sample coordinates) to be run on a model
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
#bind cooridnates and output array
xy=cbind(X,y)
#caculate the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
#create output folder
name_dir_path = str_c(t_catchment,'/',sub_catchment,'/',t_year,'/','seed-',no_seed,'/',scale_pert,'/')
dir.create(name_dir_path,recursive = TRUE)
#print parameter range
sink(str_c(t_catchment,'/',sub_catchment,'/',t_year,'/parameter_range.txt'))
print(obj1)
sink()
#write derivates which is (Nsamp X Kpar) matrix
write.csv(deriv,str_c(name_dir_path,scale_pert,'.csv'),row.names = F)
#coordinates and RMSE
write.csv(xy,str_c(name_dir_path,'xy.csv'),row.names = F)
print(str_c(wd,name_dir_path))
}
}
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/Jacobian-based/'
setwd(wd)
est_Jac(sub_catchment='test3',Nsamp = 20)
est_Hess = function (prim_dir='C:/UserData/seol/Sensitivity Analyses/IHACRES/AS',
sub_dir = 'Hessian-based', t_catchment = 'Gingera',sub_catchment = 'Constrained range',
t_year = '70s', no_seed = 2025, perts = 1e-06, Nsamp=1000){
ndir = str_c(prim_dir,'/',sub_dir,'/')
# , t_catchment,'/',sub_catchment,'/',t_year,'/seed-',no_seed,'/',perts,'/')
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)#sub-decades
ts70s <- tsPQE["1970-01-01::1979-12-31"]
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_t_year=get(str_c('ts',t_year))
obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
# obj1_ts70s <- fitBySCE(obj1, control = list(trace = 1, ncomplex = 20))
obj1$parlist['shape']=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
#r0=x, r1=x+h, r2=x-h
r0=matrix(data=runif(Nsamp*length(obj1$parlist),0,1),nrow=Nsamp,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
r2=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-6)
# for (scale_pert in perts){
scale_pert = perts[1]
#r0=x, r1=x-h, r2=x+h
for (j in 1:Kpar){
r1=r0-scale_pert
r2=r0+scale_pert
# r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
# r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
summary(r1)
summary(r2)
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
x2=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
#parameter values converted from U[0,1)
#X0 = x, X1 = x-h, X2 = x+h
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x2[rsamp,jpar]=qunif(r2[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
par_list = names(obj1$parlist)
colnames(x0) =par_list
colnames(x1) =par_list
colnames(x2) =par_list
#x0 = x, x1 = x-h, x2 = x+h
#generate 3d array
Hessian_mat = array(NaN,dim=c(Kpar,Kpar,Nsamp))
time_taken = proc.time()
#iterate by Nsamp
for (k in 1:Nsamp){
#temp_hess_mat = hessian at one point
temp_hess_mat = as.data.frame(matrix(NaN,Kpar,Kpar))
for (i in 1:Kpar){
for (j in 1:Kpar){
#u1 = u i+1,j+1
#u2 = u i+1,j
#u3 = u i,j+1
#u4 = u i-1,j-1
if (i==j){
p1 = c(x0[k,-i], x2[k,i])
p2 = x0[k,]
p3 = c(x0[k,-i], x1[k,i])
p=rbind(p1,p2,p3)
u = evalPars(p, obj1)
temp_hess_mat[i,j] = (u[1] - u[2]- u[2] +u[3] )/(x2[k,i]-x0[k,j])^2
}else {
p1 = c(x0[k,-c(i,j)], x2[k,i],x2[k,j])
p2 = c(x0[k,-c(i,j)], x2[k,i],x1[k,j])
p3 = c(x0[k,-c(i,j)], x1[k,i],x2[k,j])
p4 = c(x0[k,-c(i,j)], x1[k,i],x1[k,j])
p=rbind(p1,p2,p3,p4)
u = evalPars(p, obj1)
temp_hess_mat[i,j] = (u[1] - u[2]- u[3] +u[4] )/ (4*x2[k,i]-x0[k,i]*x2[k,j]-x0[k,j])
}
}
}
for (h in 1:Kpar){
Hessian_mat[,,k][,h]=temp_hess_mat[,h]
}
print (k)
}
time_taken2 = proc.time()- time_taken
print (time_taken2)
#generate dir : Gingera/70s/seed-2025/1e-06
name_dir_path = str_c(t_catchment,'/',sub_catchment,'/',t_year,'/','seed-',no_seed,'/',scale_pert,'/')
dir.create(name_dir_path,recursive = TRUE)
#print parameter range
sink(str_c(t_catchment,'/',sub_catchment,'/',t_year,'/parameter_range.txt'))
print(obj1)
sink()
u0 = evalPars(x0, obj1)
xy=as.data.frame(cbind(x0,u0))
xy$shape = NULL
write.csv(xy,str_c(name_dir_path,'xy.csv'),row.names = FALSE)
write.csv(Hessian_mat,str_c(name_dir_path,scale_pert,'_Hessian.csv'),row.names = FALSE)
print(str_c(wd,name_dir_path))
}
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/Hessian-based/'
setwd(wd)
est_Hess(sub_catchment = 'test3', Nsamp=20)
years = c('70s','80s','90s','00s')
seeds = c(2025,2026)
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
#compute Jacobian using finite differencing
est_Jac = function (t_year='70s', no_seed=2025, t_catchment = 'Gingera',sub_catchment='Constrained range',
Nsamp=1000){
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
head(tsPQE)
#sub-decades
ts70s <- tsPQE["1970-01-01::1979-12-31"]
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_t_year=get(str_c('ts',t_year))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.2,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.6,1))
obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
r0=matrix(data=runif(Nsamp*length(obj1$parlist),0,1),nrow=Nsamp,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-5,1e-6,1e-7)
for (scale_pert in perts[2]){
print(  scale_pert)
#r0=x, r1=x+h
for (j in 1:Kpar){
r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
#final input matrix (sample coordinates) to be run on a model
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
#bind cooridnates and output array
xy=cbind(X,y)
#caculate the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
#create output folder
name_dir_path = str_c(t_catchment,'/',sub_catchment,'/',t_year,'/','seed-',no_seed,'/',scale_pert,'/')
dir.create(name_dir_path,recursive = TRUE)
#print parameter range
sink(str_c(t_catchment,'/',sub_catchment,'/',t_year,'/parameter_range.txt'))
print(obj1)
sink()
#write derivates which is (Nsamp X Kpar) matrix
write.csv(deriv,str_c(name_dir_path,scale_pert,'.csv'),row.names = F)
#coordinates and RMSE
write.csv(xy,str_c(name_dir_path,'xy.csv'),row.names = F)
print(str_c(wd,name_dir_path))
}
}
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/Jacobian-based/'
setwd(wd)
years = c('70s','80s','90s','00s')
seeds = c(2025,2026)
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
#compute Jacobian using finite differencing
est_Jac = function (t_year='70s', no_seed=2025, t_catchment = 'Gingera',sub_catchment='Constrained range',
Nsamp=1000){
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
head(tsPQE)
#sub-decades
ts70s <- tsPQE["1970-01-01::1979-12-31"]
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_t_year=get(str_c('ts',t_year))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.2,1))
# obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(2,10), tau_s=range(200,1000),  v_s=range(0.6,1))
obj1 = hydromad(ts_t_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(200,550),tau_q=range(3,10), tau_s=range(200,1000),  v_s=range(0.7,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
r0=matrix(data=runif(Nsamp*length(obj1$parlist),0,1),nrow=Nsamp,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-5,1e-6,1e-7)
for (scale_pert in perts[2]){
print(  scale_pert)
#r0=x, r1=x+h
for (j in 1:Kpar){
r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
#final input matrix (sample coordinates) to be run on a model
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
#bind cooridnates and output array
xy=cbind(X,y)
#caculate the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
#create output folder
name_dir_path = str_c(t_catchment,'/',sub_catchment,'/',t_year,'/','seed-',no_seed,'/',scale_pert,'/')
dir.create(name_dir_path,recursive = TRUE)
#print parameter range
sink(str_c(t_catchment,'/',sub_catchment,'/',t_year,'/parameter_range.txt'))
print(obj1)
sink()
#write derivates which is (Nsamp X Kpar) matrix
write.csv(deriv,str_c(name_dir_path,scale_pert,'.csv'),row.names = F)
#coordinates and RMSE
write.csv(xy,str_c(name_dir_path,'xy.csv'),row.names = F)
print(str_c(wd,name_dir_path))
}
}
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/AS/Jacobian-based/'
setwd(wd)
years = c('70s','80s','90s','00s')
seeds = c(2025,2026)
for (i in years){
for (j in seeds){
time_taken = proc.time()
est_Jac(sub_catchment='constrained-range-1',Nsamp = 1000, t_year = i, no_seed = j)
time_taken2 = proc.time()- time_taken
print (time_taken2)
}
}
