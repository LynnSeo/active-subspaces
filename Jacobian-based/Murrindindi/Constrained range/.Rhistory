library('sensitivity')
install.packages('sensitivity')
delsa(model = NULL, perturb=1.01,
par.ranges, samples, method,
X0, varprior,
...)
6 delsa
tell(x, y = NULL,...)
library(randtoolbox)
x <- delsa(model=sobol.fun,
par.ranges=replicate(8,c(0,1),simplify=FALSE),
samples=100,method="sobol")
library(randtoolbox)
install.packages('randtoolbox')
x <- delsa(model=sobol.fun,
par.ranges=replicate(8,c(0,1),simplify=FALSE),
samples=100,method="sobol")
# Summary of sensitivity indices of each parameter across parameter space
x <- delsa(model=sobol.fun,
par.ranges=replicate(8,c(0,1),simplify=FALSE),
samples=100,method="sobol")
library('sensitivity')
x <- delsa(model=sobol.fun,
par.ranges=replicate(8,c(0,1),simplify=FALSE),
samples=100,method="sobol")
print(x)
library(ggplot2)
library(reshape2)
x11()
plot(x)
plot(x)
load("C:/UserData/seol/DELSA/DELSA 1000 runs/rr.RData")
obj=swat_obj1
temp = as.data.frame(obj$delsafirst)
temp$id <- 1:nrow(temp)
temp = reshape2::melt(temp, id.var = "id")
stopifnot(identical(obj$X0, obj$X[1:nrow(obj$X0),
]))
temp$y <- obj$y[temp$id]
temp2 = as.data.frame(obj$X0)
temp2$id <- 1:nrow(temp2)
temp2 = reshape2::melt(temp2, id.var = "id")
temp2$x <- temp2$value
temp2$value <- NULL
temp = merge(temp, temp2)
head(temp)
write.csv(temp,'temp.csv',row.names=FALSE)
name_para='Alpha_Bf'
ttemp=temp[temp[,2]==name_para,]
dtemp=ttemp
wdd=str_c(wd,'plots/')
wdd
library('stringr')
wdd=str_c(wd,'plots/')
wdd
tiff(str_c(wdd,name_para,'_parameter values.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(y = value,
x = x, colour = y)) + ggplot2::scale_y_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_x_continuous(name = "Parameter value") +
ggplot2::scale_color_continuous(name = "Model response") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as as related to parameter value"))
dev.off()
tiff(str_c(wdd,name_para,'_model response.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(x = value,  y = y)) +
ggplot2::scale_x_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_y_continuous(name = "Model output") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as related to model response"))
dev.off()
name_para='Canmax'
ttemp=temp[temp[,2]==name_para,]
dtemp=ttemp
library('stringr')
wdd=str_c(wd,'plots/')
tiff(str_c(wdd,name_para,'_parameter values.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(y = value,
x = x, colour = y)) + ggplot2::scale_y_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_x_continuous(name = "Parameter value") +
ggplot2::scale_color_continuous(name = "Model response") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as as related to parameter value"))
dev.off()
tiff(str_c(wdd,name_para,'_model response.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(x = value,  y = y)) +
ggplot2::scale_x_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_y_continuous(name = "Model output") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as related to model response"))
dev.off()
name_para='Ch_K2'
ttemp=temp[temp[,2]==name_para,]
dtemp=ttemp
library('stringr')
wdd=str_c(wd,'plots/')
tiff(str_c(wdd,name_para,'_parameter values.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(y = value,
x = x, colour = y)) + ggplot2::scale_y_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_x_continuous(name = "Parameter value") +
ggplot2::scale_color_continuous(name = "Model response") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as as related to parameter value"))
dev.off()
tiff(str_c(wdd,name_para,'_model response.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(x = value,  y = y)) +
ggplot2::scale_x_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_y_continuous(name = "Model output") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as related to model response"))
dev.off()
list_name_para=c("Alpha_Bf","Biomix",  "Blai"  ,   "Canmax",   "Ch_K2"  ,  "Ch_N2"  , "Cn2","Epco"   ,  "Esco", "Gw_Delay" ,"Gw_Revap", "Gwqmn"  ,  "Rchrg_Dp",
"Revapmn",  "Sftmp"   , "Slope" ,  "Slsubbsn", "Smfmn"   , "Smfmx"  ,  "Smtmp"   , "Sol_Alb" , "Sol_Awc" , "Sol_K" ,
"SurLag"  , "Tlaps"   , "Timp")
list_name_para=c("Alpha_Bf",   "Canmax",   "Ch_K2"  ,  "Ch_N2"  , "Cn2","Epco"   ,  "Esco", "Gw_Delay" ,"Gw_Revap", "Gwqmn"  ,  "Rchrg_Dp",
"Revapmn",  "Slope" ,   "Sol_Alb" , "Sol_Awc" , "Sol_K" ,
"SurLag"  )
for (i in list_name_para){
name_para=i
ttemp=temp[temp[,2]==name_para,]
dtemp=ttemp
library('stringr')
wdd=str_c(wd,'plots/')
tiff(str_c(wdd,name_para,'_parameter values.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(y = value,
x = x, colour = y)) + ggplot2::scale_y_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_x_continuous(name = "Parameter value") +
ggplot2::scale_color_continuous(name = "Model response") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as as related to parameter value"))
dev.off()
tiff(str_c(wdd,name_para,'_model response.tiff'))
print(ggplot2::ggplot(data = dtemp) + ggplot2::geom_point(ggplot2::aes(x = value,  y = y)) +
ggplot2::scale_x_continuous(name = "DELSA first order sensitivity") +
ggplot2::scale_y_continuous(name = "Model output") +
ggplot2::facet_wrap(~variable, scales = "free") +
ggplot2::labs(title = "First order sensitivity as related to model response"))
dev.off()
}
fitByDream()
fitByDream()
fitByDream
library(hydromad)
fitByDream
mod80s21 <- fitByDream(modspec80s21, control = list(nseq = 20, ndraw = 1e5))
install.packages('dream')
install.packages('R.matlab')
readMat()
library('R.matlab')
readMat()
15*16
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library(sensitivity)
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/withDreamSampler/'
setwd(wd)
load("C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/withDreamSampler/.RData")
plot(new.set3[,1],new.set3[,7])
hydromad.getOption('objective')
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
y.dream
summary(y.dream)
head(new.set3)
tiff('DreamSample-afterScreen.tiff')
plot(new.set3[,1],new.set3[,7])
dev.off()
write.csv(new.set3,'screened.dream.sample.csv')
head(x0)
r0=matrix(data=runif(1000*length(obj1$parlist),0,1),nrow=1000,ncol=length(obj1$parlist))
nrow(new.set3)
ncol(new.set3)
new.set3
nrow(new.set3)
x0= new.set3[,1:6]
x0
Kpar = ncol(x0)
Kpar
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x0= new.set3[,1:6]
Kpar = ncol(x0)           #number of parameter
Nsamp = nrow(new.set3)          #number of samples = 1,000
perts=c(1e-5,1e-6,1e-7)
scale_pert = perts[2]
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x1[rsamp,jpar] = x0[rsamp,jpar] +(obj1$parlist[[jpar]][2]-obj1$parlist[[jpar]][1])*scale_pert
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
xy=cbind(X,y)
#all the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
summary(deriv)
summary(xy)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
dir.create(str_c(which_year,'/','seed-',no_seed,'/',scale_pert),recursive = TRUE)
#write derivates which is 1000X13 (Nsamp X Kpar) bvmatrix
write.csv(deriv,str_c(wd,which_year,'/','seed-',no_seed,'/',scale_pert,'/',scale_pert,'.csv'))
#coordinates and RMSE
write.csv(xy,str_c(wd,which_year,'/','seed-',no_seed,'/',scale_pert,'/','xy.csv'))
print(no_seed)
print(which_year)
print(str_c(which_year,'/','seed-',no_seed,'/',scale_pert))
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
write.csv(pts.dream,'origianl_dream_sample.csv')
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library(sensitivity)
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/'
setwd(wd)
t_year='80s'           #target year for calibration
t_catchment='Murrindindi'  #target catchment
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library(sensitivity)
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/Constrained range/'
setwd(wd)
####################################
t_year='80s'           #target year for calibration
t_catchment='Murrindindi'  #target catchment
####################################
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
head(tsPQE)
#sub-decades
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
years=c('80s','90s','00s')
years[2]
for (which_year in years[1]){
# for (which_year in years){
for (no_seed in 2025:2026){
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_which_year=get(str_c('ts',which_year))
# obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(2,10), tau_s=range(15,1000),  v_s=range(0.2,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
#generate random numbers on uniform distribution
r0=matrix(data=runif(1000*length(obj1$parlist),0,1),nrow=1000,ncol=length(obj1$parlist))
Kpar = ncol(r0)           #number of parameter
Nsamp = nrow(r0)          #number of samples = 1,000
r1=matrix(data=NA,nrow=Nsamp,ncol=Kpar)
#perturb random numbers to 1e-7
# perts=c(1e-1,1e-2,1e-3,1e-4,1e-5,1e-6,1e-7,1e-8)
perts=c(1e-5,1e-6,1e-7)
scale_pert = perts[2]
for (scale_pert in perts[2]){
print(  scale_pert)
#r0=x, r1=x+h
for (j in 1:Kpar){
r1[r0[,j]>0.5,j]=r0[r0[,j]>0.5,j]-scale_pert
r1[r0[,j]<=0.5,j]=r0[r0[,j]<=0.5,j]+scale_pert
}
x0=matrix(NA,ncol=Kpar,nrow=Nsamp)
x1=matrix(NA,ncol=Kpar,nrow=Nsamp)
#generate input matrix to be run on Sacramento
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
x0[rsamp,jpar]=qunif(r0[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
x1[rsamp,jpar]=qunif(r1[rsamp,jpar],obj1$parlist[[jpar]][1],obj1$parlist[[jpar]][2])
}
}
X2 = do.call(rbind, lapply(1:ncol(x0), function(i) {
X2i = x0
X2i[, i] = x1[, i]
X2i
}))
#final input matrix (sample coordinates) to be run on a model
X=rbind(x0,X2)
colnames(X)=names(obj1$parlist)#attach parlist header
head(X)
#run model and return model performance measures.
y=evalPars(X,obj1)
xy=cbind(X,y)
#all the derivatives
out <- as.numeric(y)
deriv=matrix(NA, ncol = Kpar, nrow = Nsamp)
for (rsamp in 1:Nsamp){
for (jpar in 1:Kpar){
idx.pert=Nsamp*jpar+rsamp
deriv[rsamp, jpar] = (out[idx.pert] - out[rsamp])/(X[idx.pert, jpar] - X[rsamp, jpar])
}
}
#attach header which indicates parameter names on the result matrix
colnames(deriv)=names(obj1$parlist)
summary(deriv)
summary(xy)
deriv=as.data.frame(deriv)
xy=as.data.frame(xy)
deriv$shape = NULL
xy$shape = NULL
dir.create(str_c(which_year,'/','seed-',no_seed,'/',scale_pert),recursive = TRUE)
#write derivates which is 1000X13 (Nsamp X Kpar) bvmatrix
write.csv(deriv,str_c(wd,which_year,'/','seed-',no_seed,'/',scale_pert,'/',scale_pert,'.csv'))
#coordinates and RMSE
write.csv(xy,str_c(wd,which_year,'/','seed-',no_seed,'/',scale_pert,'/','xy.csv'))
print(no_seed)
print(which_year)
print(str_c(which_year,'/','seed-',no_seed,'/',scale_pert))
}
}
}
14/60/60
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/Constrained range/Finite_difference_ihacres.R', echo=TRUE)
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/Constrained range/Finite_difference_ihacres.R', echo=TRUE)
