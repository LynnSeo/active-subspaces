ts00s <- tsPQE["2000-01-01::2009-12-31"]
summary(ts80s)
summary(ts90s)
summary(ts00s)
years=c('80s','90s','00s')
hydromad.options(objective = hmadstat('RMSE'))
hydromad.options(objective = ~-0.5 * sum((Q - X)^2, na.rm = TRUE))
#load model property including parameter ranges
ts_which_year=get(str_c('ts',t_year))
# obj1  = hydromad(ts_which_year,sma='sacramento',routing=NULL,uztwm=c(15,150))
# obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
## cal80s
modspec80s21 <- hydromad(ts_which_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
evals<-NULL
fitByDream <- function (MODEL, loglik = hydromad.getOption("loglik"), control = hydromad.getOption("dream.control"),
vcov = TRUE)
{
library(dream)
start_time <- proc.time()
loglik <- buildCachedObjectiveFun(loglik, MODEL)
parlist <- as.list(coef(MODEL, warn = FALSE))
isok <- sapply(parlist, function(x) !any(is.na(x)))
parlist <- parlist[isok]
isfixed <- (sapply(parlist, length) == 1)
if (all(isfixed)) {
warning("all parameters are fixed, so can not fit")
return(MODEL)
}
parlist <- parlist[!isfixed]
if (!isTRUE(hydromad.getOption("trace")))
control$REPORT <- 0
do_dream <- function(pars) {
names(pars) <- names(parlist)
thisMod <- update(MODEL, newpars = pars)
if (!isValidModel(thisMod))
return(-1e+08)
obj<-objFunVal(thisMod, objective = loglik)
evals<<-rbind(evals,c(pars,loglik=obj))
return(obj)
}
ans <- dream(do_dream, pars = parlist, func.type = "logposterior.density",
control = control)
bestPars <- coef(ans, method = "sample.ml")
bestModel <- update(MODEL, newpars = bestPars)
bestModel$funevals <- ans$fun.evals
bestModel$timing <- signif(proc.time() - start_time, 4)[1:3]
bestModel$objective <- loglik
if (vcov) {
start <- end(ans$Sequences)/2 + 1
bestModel$cov.mat <- cov(as.matrix(window(ans$Sequences,
start = start)))
}
bestModel$fit.call <- match.call()
bestModel$fit.result <- ans
return(bestModel)
}
evals80s21 <- evals
load("mod80s21.Rdata")
load("evals80s21.Rdata")
pars.80s <- evals80s21[,-c(7)]
objseq.80s <- evals80s21[,7]
head(evals80s21)
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library(sensitivity)
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/withDreamSampler/'
setwd(wd)
#read input
#read input
####################################
t_year='80s'           #target year for calibration
t_catchment='Murrindindi'  #target catchment
####################################
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
#sub-decades
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
years=c('80s','90s','00s')
which_year = years[1]
no_seed = 2026
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_which_year=get(str_c('ts',which_year))
# obj1  = hydromad(ts_which_year,sma='sacramento',routing=NULL,uztwm=c(15,150))
obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
sampled.dream = read.csv('sampled.by.dream.csv')
sampled.dream$X =NULL
head(sampled.dream)
plot(sampled.dream[1:100,1],sampled.dream[1:100,7])
plot(sampled.dream[,1],sampled.dream[,7])
sampled.dream = read.csv('sampled.by.dream.csv')
setwd("C:/UserData/seol/Model Calibration/ACT_19_hydromad_GR4J/Modelling_scenario/2_Cal_method/4_Dotty_plot/Gingera_80s/Gingera_SSR_21_Dream_ev_6para/Gingera_SSR_21_Dream_ev_6para_Exact - Copy/")
set.seed(1221)
################################################################################
library(hydromad)
library("latticeExtra")
library("xts")
library(dream)
library(stringr)
options(chmhelp = FALSE)
################################################################################
## input data
############################################################################
t_year='80s'           #target year for calibration
t_catchment='Murrindindi'  #target catchment
############################################################################
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
head(tsPQE)
#sub-decades
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
summary(ts80s)
summary(ts90s)
summary(ts00s)
years=c('80s','90s','00s')
hydromad.options(objective = hmadstat('RMSE'))
hydromad.options(objective = ~-0.5 * sum((Q - X)^2, na.rm = TRUE))
#load model property including parameter ranges
ts_which_year=get(str_c('ts',t_year))
# obj1  = hydromad(ts_which_year,sma='sacramento',routing=NULL,uztwm=c(15,150))
# obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
#                 f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
## cal80s
modspec80s21 <- hydromad(ts_which_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
evals<-NULL
fitByDream <- function (MODEL, loglik = hydromad.getOption("loglik"), control = hydromad.getOption("dream.control"),
vcov = TRUE)
{
library(dream)
start_time <- proc.time()
loglik <- buildCachedObjectiveFun(loglik, MODEL)
parlist <- as.list(coef(MODEL, warn = FALSE))
isok <- sapply(parlist, function(x) !any(is.na(x)))
parlist <- parlist[isok]
isfixed <- (sapply(parlist, length) == 1)
if (all(isfixed)) {
warning("all parameters are fixed, so can not fit")
return(MODEL)
}
parlist <- parlist[!isfixed]
if (!isTRUE(hydromad.getOption("trace")))
control$REPORT <- 0
do_dream <- function(pars) {
names(pars) <- names(parlist)
thisMod <- update(MODEL, newpars = pars)
if (!isValidModel(thisMod))
return(-1e+08)
obj<-objFunVal(thisMod, objective = loglik)
evals<<-rbind(evals,c(pars,loglik=obj))
return(obj)
}
ans <- dream(do_dream, pars = parlist, func.type = "logposterior.density",
control = control)
bestPars <- coef(ans, method = "sample.ml")
bestModel <- update(MODEL, newpars = bestPars)
bestModel$funevals <- ans$fun.evals
bestModel$timing <- signif(proc.time() - start_time, 4)[1:3]
bestModel$objective <- loglik
if (vcov) {
start <- end(ans$Sequences)/2 + 1
bestModel$cov.mat <- cov(as.matrix(window(ans$Sequences,
start = start)))
}
bestModel$fit.call <- match.call()
bestModel$fit.result <- ans
return(bestModel)
}
evals80s21 <- evals
load("mod80s21.Rdata")
load("evals80s21.Rdata")
sampled.by.dream = cbind(fs.80s$feasible.set,fs.80s$feasible.score)
head(evals80s21)
nrow(evals80s21)
thres.80s <- objFunVal(mod80s21,objective=hmadstat("r.squared"))-0.005
thres.80s
objFunVal(mod80s21,objective=hmadstat("r.squared"))
mod80s21
ref.80s <- sum((observed(mod80s21)-mean(observed(mod80s21)))^2)
ref.80s
thres.80s
thres.loglik.80s
thres.loglik.80s <- (thres.80s-1)*ref.80s*0.5
thres.loglik.80s
thres.80s
summary(evals80s21\)
summary(evals80s21)
write.csv(evals80s21,'sampled.by.dream.csv')
#RS of Sacramento
library('zoo')
library('hydromad')
library('xts')
library('stringr')
library(sensitivity)
#set up working directory
wd='C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/withDreamSampler/'
setwd(wd)
#read input
#read input
####################################
t_year='80s'           #target year for calibration
t_catchment='Murrindindi'  #target catchment
####################################
name_tspqe=str_c('C:/UserData/seol/Sensitivity Analyses/PQE input/',t_catchment,'/',t_catchment,'.csv')
tsPQE=read.zoo(name_tspqe,sep=',',header=TRUE)
tsPQE=as.xts(tsPQE)
#sub-decades
ts80s <- tsPQE["1980-01-01::1989-12-31"]
ts90s <- tsPQE["1990-01-01::1999-12-31"]
ts00s <- tsPQE["2000-01-01::2009-12-31"]
years=c('80s','90s','00s')
which_year = years[1]
no_seed = 2026
#set up obj function
# hydromad.options(objective = ~hmadstat("r.squared")(Q, X)/(2-hmadstat("r.squared")(Q, X)))
hydromad.options(objective = hmadstat('RMSE'))
#load model property including parameter ranges
ts_which_year=get(str_c('ts',which_year))
# obj1  = hydromad(ts_which_year,sma='sacramento',routing=NULL,uztwm=c(15,150))
obj1 = hydromad(ts_which_year,sma='cmd',routing='expuh',
f=range(0.5,1.5),e=range(0.99,1.01),d=range(50,550),tau_q=range(0,10), tau_s=range(15,1000),  v_s=range(0,1))
obj1$parlist$shape=NULL
#set up same seed number
set.seed(no_seed)
sampled.dream = read.csv('sampled.by.dream.csv')
head(sampled.dream)
sampled.dream$X =NULL
head(sampled.dream)
plot(sampled.dream[1:100,1],sampled.dream[1:100,7])
plot(sampled.dream[1:1000,1],sampled.dream[1:1000,7])
head(sampled.dream)
hydromad.getOption('objective')
hydromad.options(objective = hmadstat('RMSE'))
hydromad.getOption('objective')
coordinate.dream.sample = sampled.dream,[1:6]
sampled.dream[,1:6]
head(sampled.dream[,1:6])
coordinate.dream.sample = sampled.dream[,1:6]
obj1
nrow(coordinate.dream.sample)
y.dream = evalPars(coordinate.dream.sample,obj1)
y.dream
y.dream
pts.dream = cbind(cooridnate.dream.sample,y.dream)
pts.dream = cbind(coordinate.dream.sample,y.dream)
plot(pts.dream[1:1000,1],pts.dream[1:1000,7])
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 100
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 2000
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 3000
last.pt = 4000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 2000
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1001
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1101
last.pt = 2100
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
source('C:/UserData/seol/Sensitivity Analyses/IHACRES/Gradient using finite difference/withDreamSampler/Finite_difference_ihacres.R', echo=TRUE)
first.pt = 1001
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7])
first.pt = 1001
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1201
last.pt = 2200
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
last.pt = 100
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 100
last.pt = 200
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
summary(pts.dream[first.pt:last.pt,])
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
summary(pts.dream[first.pt:last.pt,])
first.pt = 2000
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
summary(pts.dream[first.pt:last.pt,])
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 2000
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 2000
last.pt = 3000
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1
last.pt = 1000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 2000
last.pt = 3000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 3000
last.pt = 4000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1000
last.pt = 2000
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1100
last.pt = 2100
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1200
last.pt = 2200
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1300
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1000
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1100
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1200
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1100
last.pt = 2300
first.pt = 1000
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
write.csv(pts.dream[first.pt:last.pt,],'screened.dream.sample.csv')
first.pt = 1100
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
first.pt = 1000
last.pt = 2300
first.pt = 1000
last.pt = 2300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
plot(pts.dream[first.pt:last.pt,2],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8),xlim=c(0.5,1.5))
plot(pts.dream[first.pt:last.pt,2],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,3],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,4],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,5],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,6],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
new.set = pts.dream[first.pt:last.pt,]
lm(new.set[,7] ~ new.set[,1])
a = lm(new.set[,7] ~ new.set[,1])
a$coefficients
a$residuals
a$fitted.values
plot(new.set[,1],a$fitted.values)
head(new.set)
new.set = cbind(new.set,a$fitted.values)
head(new.set)
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
new.set = pts.dream[first.pt:last.pt,]
a = lm(new.set[,7] ~ new.set[,1])
a$residuals
new.set = cbind(new.set,a$fitted.values,a$residuals)
head(new.set)
colnames(new.set)
colnames(new.set[7])
colnames(new.set[7]) ='y'
colnames(new.set[8]) ='fitted.value'
colnames(new.set[9])  ='residuals'
head(new.set)
colnames(new.set[7]) = 'y'
colnames(new.set[8]) = 'fitted.value'
colnames(new.set[9]) = 'residuals'
head(new.set)
colnames(new.set[7]) = names('y')
head(new.set)
names(new.set[7]) = 'y'
head(new.set)
class(new.set)
names(new.set[7])
names(new.set[7]) = 'y'
head(new.set)
names(new.set[7]) = 'y'
new.set[7]
colnames(new.set[8])
colnames(new.set)[7] = 'y'
colnames(new.set[8]) = 'fitted.value'
colnames(new.set[9]) = 'residuals'
head(new.set)
colnames(new.set)[8] = 'fitted.value'
colnames(new.set)[9] = 'residuals'
head(new.set)
order(new.set$residuals)
head(new.set)
new.set2 = new.set[order(new.set$residuals),]
head(new.set2)
new.set3 = new.set2[1:1000,]
plot(new.set3[,1],new.set3[,3])
plot(new.set3[,1],new.set3[,3],ylim = c(0.3,1.8))
new.set3
head(new.set3)
plot(new.set3[,1],new.set3[,7],ylim = c(0.3,1.8))
plot(new.set3[,2],new.set3[,7],ylim = c(0.3,1.8))
plot(new.set3[,3],new.set3[,7],ylim = c(0.3,1.8))
plot(new.set3[,4],new.set3[,7],ylim = c(0.3,1.8))
write.csv(new.set3,'screened.dream.sample.csv')
write.csv(new.set3,'screened.dream.sample.csv')
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1
last.pt = 4300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1
last.pt = 4300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
new.set = pts.dream[first.pt:last.pt,]
a = lm(new.set[,7] ~ new.set[,1])
a$residuals
new.set = cbind(new.set,a$fitted.values,a$residuals)
colnames(new.set)[7] = 'y'
colnames(new.set)[8] = 'fitted.value'
colnames(new.set)[9] = 'residuals'
new.set2 = new.set[order(new.set$residuals),]
head(new.set2)
new.set3 = new.set2[1:1000,]
head(new.set3)
plot(new.set[,1],new.set[,7])
plot(new.set3[,1],new.set3[,7])
first.pt = 1
last.pt = 4300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1000
last.pt = 4300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
new.set = pts.dream[first.pt:last.pt,]
new.set = cbind(new.set,a$fitted.values,a$residuals)
new.set = cbind(new.set,a$fitted.values,a$residuals)
colnames(new.set)[7] = 'y'
a = lm(new.set[,7] ~ new.set[,1])
new.set = cbind(new.set,a$fitted.values,a$residuals)
colnames(new.set)[7] = 'y'
colnames(new.set)[7] = 'y'
colnames(new.set)[8] = 'fitted.value'
colnames(new.set)[9] = 'residuals'
new.set2 = new.set[order(new.set$residuals),]
head(new.set2)
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
first.pt = 1000
last.pt = 4300
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
tiff('dreamSamples.tiff')
plot(pts.dream[first.pt:last.pt,1],pts.dream[first.pt:last.pt,7],ylim = c(0.3,1.8))
dev.off()
new.set = pts.dream[first.pt:last.pt,]
#linear fitting
a = lm(new.set[,7] ~ new.set[,1])
#include fitted values and residuals
new.set = cbind(new.set,a$fitted.values,a$residuals)
colnames(new.set)[7] = 'y'
colnames(new.set)[8] = 'fitted.value'
colnames(new.set)[9] = 'residuals'
new.set2 = new.set[order(new.set$residuals),]
head(new.set2)
new.set3 = new.set2[1:1000,]
head(new.set3)
plot(new.set3[,1],new.set3[,7])
tiff('DreamSample-afterScreen.tiff')
plot(new.set3[,1],new.set3[,7])
dev.off()
write.csv(new.set3,'screened.dream.sample.csv')
